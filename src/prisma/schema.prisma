datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @db.Timestamp(6)
  emailVerified DateTime? @map("email_verified")
  email           String?           @db.VarChar(255) @unique
  name            String?
  image           String?
  password        String?
  userAssesment   UserAssesment?
  questions       Question[]
  accounts      Account[]
  @@map("users")
}



model UserAssesment {
  id             String     @id @default(uuid())
  createdAt      DateTime   @default(now()) @db.Timestamp(6)
  updatedAt      DateTime   @updatedAt
  firstName      String        
  lastName       String
  mobileNo       String?
  email          String?  @unique
  country        String?
  childrenNo     Int?
  age            Int?
  educationLevel EducationLevel?
  educationField String?
  englishLevel   EnglishLevel?
  frenchLevel    String?
  ieltsScore    String?
  familyInCanada Boolean
  travelHistory  String?
  netWorth       String?
  comment        String?
  user           User  @relation(fields: [userId],references: [id])
  userId         String  @unique
}

// model from Auth.js prisma adapter implementation (session and token) 
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Question {
  id             String  @id @default(cuid())
  phone          String
  email          String
  question       String
  user           User  @relation(fields: [userId],references: [id])
  userId         String  @unique
  isOpen         Boolean? @default(true)
  name           String


}


enum EducationLevel{
    Primary 
    Secondary
    Tertiary
}


enum EnglishLevel{
    Beginner 
    Intermediate
    Advanced
}